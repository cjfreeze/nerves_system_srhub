/*
 * Copyright (C) 2018-19 SmartRent
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */
/dts-v1/;

#include "am33xx.dtsi"
#include "am335x-osd335x-common.dtsi"
#include <dt-bindings/input/input.h>

/ {
	model = "TI AM335x Smartrent Hub";
	compatible = "ti,am335x-pocketbeagle", "ti,am335x-bone", "ti,am33xx";

	chosen {
		stdout-path = &uart0;
	};

        reserved-memory {
                #address-cells = <1>;
                #size-cells = <1>;
                ranges;

                ramoops@88d00000{
                        compatible = "ramoops";
                        reg = <0x88d00000 0x100000>;
                        ecc-size = <16>;
                        record-size     = <0x00020000>;
                        console-size    = <0x00020000>;
                        ftrace-size     = <0>;
                        pmsg-size       = <0x00020000>;
                };
        };

	leds {
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&user_leds_default>;
		pinctrl-1 = <&user_leds_sleep>;

		compatible = "gpio-leds";

		led@2 {
			label = "led1:green";
			gpios = <&gpio3 20 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "none";
			default-state = "off";
		};

		led@3 {
			label = "led1:red";
			gpios = <&gpio3 19 GPIO_ACTIVE_LOW>;
			linux,default-trigger = "timer";
			default-state = "on";
		};
	};

	buttons {
		compatible = "gpio-keys";

		button@1 {
			label = "Button 1";
			linux,code = <KEY_1>;
			gpios = <&gpio3 18 GPIO_ACTIVE_LOW>;
		};
	};

	vmmcsd_fixed: fixedregulator0 {
		compatible = "regulator-fixed";
		regulator-name = "vmmcsd_fixed";
		regulator-min-microvolt = <3300000>;
		regulator-max-microvolt = <3300000>;
	};
};

&am33xx_pinmux {
	user_leds_default: user_leds_default {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x09a4, PIN_OUTPUT_PULLUP | MUX_MODE7)	/* mcasp0_fsr.gpio3_19 */
			AM33XX_IOPAD(0x09a8, PIN_OUTPUT_PULLUP | MUX_MODE7)	/* mcasp0_axr1.gpio3_20 */
		>;
	};

	user_leds_sleep: user_leds_sleep {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x09a4, PIN_INPUT_PULLUP | MUX_MODE7)	/* mcasp0_fsr.gpio3_19 */
			AM33XX_IOPAD(0x09a8, PIN_INPUT_PULLUP | MUX_MODE7)	/* mcasp0_axr1.gpio3_20 */
		>;
	};

	i2c1_pins: pinmux_i2c1_pins {
		/* I2C 1
		 *  - ATECC508A
		 */
		pinctrl-single,pins = <
                        AM33XX_IOPAD(0x0958, PIN_OUTPUT_PULLUP | INPUT_EN | MUX_MODE2)     /* spi0_d1.i2c1_sda */
                        AM33XX_IOPAD(0x095c, PIN_OUTPUT_PULLUP | INPUT_EN | MUX_MODE2)     /* spi0_cs0.i2c1_scl */
		>;
	};

	uart0_pins: pinmux_uart0_pins {
		pinctrl-single,pins = <
			AM33XX_IOPAD(0x0970, PIN_INPUT_PULLUP | MUX_MODE0)	/* uart0_rxd.uart0_rxd */
			AM33XX_IOPAD(0x0974, PIN_OUTPUT_PULLDOWN | MUX_MODE0)	/* uart0_txd.uart0_txd */
		>;
	};

        uart1_pins: pinmux_uart1_pins {
		/* LTE UART on X2B boards */
                pinctrl-single,pins = <
		        AM33XX_IOPAD(0x0980, PIN_INPUT_PULLUP | MUX_MODE0)           /* uart1_rxd.uart1_rxd */
                        AM33XX_IOPAD(0x0984, PIN_OUTPUT_PULLDOWN | MUX_MODE0 )       /* uart1_txd.uart1_txd */
                        AM33XX_IOPAD(0x0978, PIN_INPUT | MUX_MODE0 )                 /* uart1_ctsn.uart1_ctsn */
                        AM33XX_IOPAD(0x097c, PIN_OUTPUT_PULLDOWN | MUX_MODE0 )       /* uart1_rtsn.uart1_rtsn */
                >;
        };

        uart4_pins: pinmux_uart4_pins {
                pinctrl-single,pins = <
		        AM33XX_IOPAD(0x0870, PIN_OUTPUT_PULLUP | INPUT_EN | MUX_MODE6) 	/* gpmc_wait0.uart4_rxd */
		        AM33XX_IOPAD(0x0874, PIN_OUTPUT_PULLUP | INPUT_EN | MUX_MODE6)	/* gpmc_wpn.uart4_txd */
                >;
        };

        zwave_pins: pinmux_zwave_pins {
                pinctrl-single,pins = <
                        AM33XX_IOPAD(0x0830, PIN_INPUT | INPUT_EN | MUX_MODE7)           /* gpmc_ad12.gpio1_12 (Gen3 Z-wave SWCLK) */
                        AM33XX_IOPAD(0x0834, PIN_INPUT | INPUT_EN | MUX_MODE7)           /* gpmc_ad13.gpio1_13 (Gen3 Z-wave SWDIO) */
                        AM33XX_IOPAD(0x083c, PIN_OUTPUT | MUX_MODE7)                     /* gpmc_ad15.gpio1_15 (Gen3 Z-wave ResetN) */
                        AM33XX_IOPAD(0x0878, PIN_OUTPUT | MUX_MODE7)                     /* gpmc_be1n.gpio1_28 (Barebones Z-wave ResetN) */
                >;
        };

        gpio3_pins: pinmux_gpio3_pins {
                pinctrl-single,pins = <
                        AM33XX_IOPAD(0x09a0, PIN_INPUT_PULLDOWN | INPUT_EN | MUX_MODE7)    /* mcasp0_aclkr.gpio3_18 (Button) */
                        AM33XX_IOPAD(0x0990, PIN_OUTPUT_PULLUP | MUX_MODE7)   /* mcasp0_aclkx.gpio3_14 (Gen3 LTE WakeN) */
                        AM33XX_IOPAD(0x0994, PIN_OUTPUT_PULLUP | MUX_MODE7)   /* mcasp0_fsx.gpio3_15 (Gen3 LTE ResetN) */
                >;
        };

        usb0_drvvbus: usb0_drvvbus {
                pinctrl-single,pins = <
                        AM33XX_IOPAD(0xa1c, PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* usb0_drvvbus.usb0_drvvbus */
                >;
        };

        usb1_drvvbus: usb1_drvvbus {
                pinctrl-single,pins = <
                        AM33XX_IOPAD(0xa34, PIN_OUTPUT_PULLDOWN | MUX_MODE0) /* usb1_drvvbus.usb1_drvvbus */
                >;
        };
};


&uart0 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart0_pins>;
};

&uart1 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart1_pins>;
};

&uart4 {
	status = "okay";
	pinctrl-names = "default";
	pinctrl-0 = <&uart4_pins>;
};

&usb {
	status = "okay";
};

&usb_ctrl_mod {
	status = "okay";
};

&usb0_phy {
	status = "okay";
};

&usb0 {
        pinctrl-names = "default";
        pinctrl-0 = <&usb0_drvvbus>;

	status = "okay";
	dr_mode = "host";
};

&usb1_phy {
	status = "okay";
};

&usb1 {
        pinctrl-names = "default";
        pinctrl-0 = <&usb1_drvvbus>;

	status = "okay";
	dr_mode = "host";
};

&cppi41dma  {
	status = "okay";
};

&i2c1 {
	pinctrl-names = "default";
	pinctrl-0 = <&i2c1_pins>;

	status = "okay";

        /* The ATECC508A requires a wakeup to be used. See the datasheet for
         * for details about holding SDA low. To make this easier, the I2C
         * clock is reduced to ~62KHz.
         */
	clock-frequency = <62000>;
};

&tscadc {
	status = "okay";
	adc {
		ti,adc-channels = <7>;
		ti,chan-step-avg = <0x16>;
		ti,chan-step-opendelay = <0x98>;
		ti,chan-step-sampledelay = <0x0>;
	};
};

&mmc1 {
	status = "okay";
	vmmc-supply = <&vmmcsd_fixed>;
	bus-width = <4>;
/*
	pinctrl-names = "default";
	pinctrl-0 = <&mmc0_pins>;
	cd-gpios = <&gpio0 6 GPIO_ACTIVE_LOW>;*/
};

&wkup_m3_ipc {
	ti,scale-data-fw = "am335x-bone-scale-data.bin";
};

&rtc {
	system-power-controller;
};

&gpio3 {
	pinctrl-names = "default";
	pinctrl-0 = <&gpio3_pins>;

        button {
                gpio-hog;
                gpios = <18>;
                input;
                line-name = "button";
        };

        lte_wake_n {
                /* Initialize high for open-drain to modem since some modems drive wake_n */
                gpio-hog;
                gpios = <14 GPIO_ACTIVE_HIGH>;
                output-high;
                line-name = "LTE_WAKE_N";
        };

        lte_resetn {
                /* Initialize low to put modem in reset */
                gpio-hog;
                gpios = <15 GPIO_ACTIVE_HIGH>;
                output-low;
                line-name = "LTE_RESET_N";
        };
};

